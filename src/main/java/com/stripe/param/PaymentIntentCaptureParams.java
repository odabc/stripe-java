// Generated by com.stripe.generator.entity.SdkBuilder

package com.stripe.param;

import com.google.gson.annotations.SerializedName;
import com.stripe.net.ApiRequestParams;
import java.util.ArrayList;
import java.util.List;
import lombok.Getter;

@Getter
public class PaymentIntentCaptureParams extends ApiRequestParams {
  /**
   * The amount to capture from the PaymentIntent, which must be less than or equal to the original
   * amount. Any additional amount will be automatically refunded. Defaults to the full
   * `amount_capturable` if not provided.
   */
  @SerializedName("amount_to_capture")
  Long amountToCapture;

  /**
   * The amount of the application fee (if any) that will be applied to the payment and transferred
   * to the application owner's Stripe account. For more information, see the PaymentIntents
   * [Connect usage guide](/docs/payments/payment-intents/usage#connect).
   */
  @SerializedName("application_fee_amount")
  Long applicationFeeAmount;

  /** Specifies which fields in the response should be expanded. */
  @SerializedName("expand")
  List<String> expand;

  /** The [Level III data](https://stripe.com/docs/level3) associated with this payment. */
  @SerializedName("level3")
  Level3 level3;

  private PaymentIntentCaptureParams(
      Long amountToCapture, Long applicationFeeAmount, List<String> expand, Level3 level3) {
    this.amountToCapture = amountToCapture;
    this.applicationFeeAmount = applicationFeeAmount;
    this.expand = expand;
    this.level3 = level3;
  }

  public static Builder builder() {
    return new com.stripe.param.PaymentIntentCaptureParams.Builder();
  }

  public static class Builder {
    private Long amountToCapture;

    private Long applicationFeeAmount;

    private List<String> expand;

    private Level3 level3;

    /** Finalize and obtain parameter instance from this builder. */
    public PaymentIntentCaptureParams build() {
      return new PaymentIntentCaptureParams(
          this.amountToCapture, this.applicationFeeAmount, this.expand, this.level3);
    }

    /**
     * Add all elements to `expand` list. A list is initialized for the first `add/addAll` call, and
     * subsequent calls adds additional elements to the original list. See {@link
     * PaymentIntentCaptureParams#expand} for the field documentation.
     */
    public Builder addAllExpand(List<String> elements) {
      if (this.expand == null) {
        this.expand = new ArrayList<>();
      }
      this.expand.addAll(elements);
      return this;
    }

    /**
     * Add an element to `expand` list. A list is initialized for the first `add/addAll` call, and
     * subsequent calls adds additional elements to the original list. See {@link
     * PaymentIntentCaptureParams#expand} for the field documentation.
     */
    public Builder addExpand(String element) {
      if (this.expand == null) {
        this.expand = new ArrayList<>();
      }
      this.expand.add(element);
      return this;
    }

    /**
     * The amount to capture from the PaymentIntent, which must be less than or equal to the
     * original amount. Any additional amount will be automatically refunded. Defaults to the full
     * `amount_capturable` if not provided.
     */
    public Builder setAmountToCapture(Long amountToCapture) {
      this.amountToCapture = amountToCapture;
      return this;
    }

    /**
     * The amount of the application fee (if any) that will be applied to the payment and
     * transferred to the application owner's Stripe account. For more information, see the
     * PaymentIntents [Connect usage guide](/docs/payments/payment-intents/usage#connect).
     */
    public Builder setApplicationFeeAmount(Long applicationFeeAmount) {
      this.applicationFeeAmount = applicationFeeAmount;
      return this;
    }

    /** The [Level III data](https://stripe.com/docs/level3) associated with this payment. */
    public Builder setLevel3(Level3 level3) {
      this.level3 = level3;
      return this;
    }
  }

  @Getter
  public static class Level3 {
    /**
     * An alphanumeric string, at most 17 characters long. Customers sometimes are required to
     * supply this, depending on their card.
     */
    @SerializedName("customer_reference")
    String customerReference;

    /** An array of items that were purchased. */
    @SerializedName("line_items")
    List<LineItem> lineItems;

    /**
     * An alphanumeric string, at most 25 characters long. Unique value assigned by the user that
     * specifies the order. Also known as an 'Order ID'.
     */
    @SerializedName("merchant_reference")
    String merchantReference;

    /** Customer's US shipping address ZIP code. */
    @SerializedName("shipping_address_zip")
    String shippingAddressZip;

    /** The cost in %s it took to ship the item, if the cost was given to the customer. */
    @SerializedName("shipping_amount")
    Long shippingAmount;

    /** Merchant's US shipping address ZIP code. */
    @SerializedName("shipping_from_zip")
    String shippingFromZip;

    private Level3(
        String customerReference,
        List<LineItem> lineItems,
        String merchantReference,
        String shippingAddressZip,
        Long shippingAmount,
        String shippingFromZip) {
      this.customerReference = customerReference;
      this.lineItems = lineItems;
      this.merchantReference = merchantReference;
      this.shippingAddressZip = shippingAddressZip;
      this.shippingAmount = shippingAmount;
      this.shippingFromZip = shippingFromZip;
    }

    public static Builder builder() {
      return new com.stripe.param.PaymentIntentCaptureParams.Level3.Builder();
    }

    public static class Builder {
      private String customerReference;

      private List<LineItem> lineItems;

      private String merchantReference;

      private String shippingAddressZip;

      private Long shippingAmount;

      private String shippingFromZip;

      /** Finalize and obtain parameter instance from this builder. */
      public Level3 build() {
        return new Level3(
            this.customerReference,
            this.lineItems,
            this.merchantReference,
            this.shippingAddressZip,
            this.shippingAmount,
            this.shippingFromZip);
      }

      /**
       * Add all elements to `lineItems` list. A list is initialized for the first `add/addAll`
       * call, and subsequent calls adds additional elements to the original list. See {@link
       * Level3#lineItems} for the field documentation.
       */
      public Builder addAllLineItem(List<LineItem> elements) {
        if (this.lineItems == null) {
          this.lineItems = new ArrayList<>();
        }
        this.lineItems.addAll(elements);
        return this;
      }

      /**
       * Add an element to `lineItems` list. A list is initialized for the first `add/addAll` call,
       * and subsequent calls adds additional elements to the original list. See {@link
       * Level3#lineItems} for the field documentation.
       */
      public Builder addLineItem(LineItem element) {
        if (this.lineItems == null) {
          this.lineItems = new ArrayList<>();
        }
        this.lineItems.add(element);
        return this;
      }

      /**
       * An alphanumeric string, at most 17 characters long. Customers sometimes are required to
       * supply this, depending on their card.
       */
      public Builder setCustomerReference(String customerReference) {
        this.customerReference = customerReference;
        return this;
      }

      /**
       * An alphanumeric string, at most 25 characters long. Unique value assigned by the user that
       * specifies the order. Also known as an 'Order ID'.
       */
      public Builder setMerchantReference(String merchantReference) {
        this.merchantReference = merchantReference;
        return this;
      }

      /** Customer's US shipping address ZIP code. */
      public Builder setShippingAddressZip(String shippingAddressZip) {
        this.shippingAddressZip = shippingAddressZip;
        return this;
      }

      /** The cost in %s it took to ship the item, if the cost was given to the customer. */
      public Builder setShippingAmount(Long shippingAmount) {
        this.shippingAmount = shippingAmount;
        return this;
      }

      /** Merchant's US shipping address ZIP code. */
      public Builder setShippingFromZip(String shippingFromZip) {
        this.shippingFromZip = shippingFromZip;
        return this;
      }
    }

    @Getter
    public static class LineItem {
      /**
       * Non-negative integer. The amount an item was discounted (if there was a sale, for example)
       */
      @SerializedName("discount_amount")
      Long discountAmount;

      /** At most 12 characters that uniquely identifies the product. */
      @SerializedName("product_code")
      String productCode;

      /** At most 25 characters long. Description of the product. */
      @SerializedName("product_description")
      String productDescription;

      /** Non-negative integer. The number of items of this type sold. */
      @SerializedName("quantity")
      Long quantity;

      /** Non-negative integer. The amount of tax this item had added to it, in cents. */
      @SerializedName("tax_amount")
      Long taxAmount;

      /** Non-negative integer. Cost of the product, in cents. */
      @SerializedName("unit_cost")
      Long unitCost;

      private LineItem(
          Long discountAmount,
          String productCode,
          String productDescription,
          Long quantity,
          Long taxAmount,
          Long unitCost) {
        this.discountAmount = discountAmount;
        this.productCode = productCode;
        this.productDescription = productDescription;
        this.quantity = quantity;
        this.taxAmount = taxAmount;
        this.unitCost = unitCost;
      }

      public static Builder builder() {
        return new com.stripe.param.PaymentIntentCaptureParams.Level3.LineItem.Builder();
      }

      public static class Builder {
        private Long discountAmount;

        private String productCode;

        private String productDescription;

        private Long quantity;

        private Long taxAmount;

        private Long unitCost;

        /** Finalize and obtain parameter instance from this builder. */
        public LineItem build() {
          return new LineItem(
              this.discountAmount,
              this.productCode,
              this.productDescription,
              this.quantity,
              this.taxAmount,
              this.unitCost);
        }

        /**
         * Non-negative integer. The amount an item was discounted (if there was a sale, for
         * example)
         */
        public Builder setDiscountAmount(Long discountAmount) {
          this.discountAmount = discountAmount;
          return this;
        }

        /** At most 12 characters that uniquely identifies the product. */
        public Builder setProductCode(String productCode) {
          this.productCode = productCode;
          return this;
        }

        /** At most 25 characters long. Description of the product. */
        public Builder setProductDescription(String productDescription) {
          this.productDescription = productDescription;
          return this;
        }

        /** Non-negative integer. The number of items of this type sold. */
        public Builder setQuantity(Long quantity) {
          this.quantity = quantity;
          return this;
        }

        /** Non-negative integer. The amount of tax this item had added to it, in cents. */
        public Builder setTaxAmount(Long taxAmount) {
          this.taxAmount = taxAmount;
          return this;
        }

        /** Non-negative integer. Cost of the product, in cents. */
        public Builder setUnitCost(Long unitCost) {
          this.unitCost = unitCost;
          return this;
        }
      }
    }
  }
}

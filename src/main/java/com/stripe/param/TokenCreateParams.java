// Generated by com.stripe.generator.entity.SdkBuilder

package com.stripe.param;

import com.google.gson.annotations.SerializedName;
import com.stripe.net.ApiRequestParams;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import lombok.Getter;

@Getter
public class TokenCreateParams extends ApiRequestParams {
  /** Information for the account this token will represent. */
  @SerializedName("account")
  Account account;

  /** The bank account this token will represent. */
  @SerializedName("bank_account")
  BankAccount bankAccount;

  @SerializedName("card")
  Object card;

  @SerializedName("currency")
  String currency;

  /**
   * The customer (owned by the application's account) for which to create a token. For use only
   * with [Stripe Connect](https://stripe.com/docs/connect). Also, this can be used only with an
   * [OAuth access token](https://stripe.com/docs/connect/standard-accounts) or [Stripe-Account
   * header](https://stripe.com/docs/connect/authentication). For more details, see [Shared
   * Customers](https://stripe.com/docs/connect/shared-customers).
   */
  @SerializedName("customer")
  String customer;

  /** Specifies which fields in the response should be expanded. */
  @SerializedName("expand")
  List<String> expand;

  /** The PII this token will represent. */
  @SerializedName("pii")
  Pii pii;

  private TokenCreateParams(
      Account account,
      BankAccount bankAccount,
      Object card,
      String currency,
      String customer,
      List<String> expand,
      Pii pii) {
    this.account = account;
    this.bankAccount = bankAccount;
    this.card = card;
    this.currency = currency;
    this.customer = customer;
    this.expand = expand;
    this.pii = pii;
  }

  public static Builder builder() {
    return new com.stripe.param.TokenCreateParams.Builder();
  }

  public static class Builder {
    private Account account;

    private BankAccount bankAccount;

    private Object card;

    private String currency;

    private String customer;

    private List<String> expand;

    private Pii pii;

    /** Finalize and obtain parameter instance from this builder. */
    public TokenCreateParams build() {
      return new TokenCreateParams(
          this.account,
          this.bankAccount,
          this.card,
          this.currency,
          this.customer,
          this.expand,
          this.pii);
    }

    /**
     * Add all elements to `expand` list. A list is initialized for the first `add/addAll` call, and
     * subsequent calls adds additional elements to the original list. See {@link
     * TokenCreateParams#expand} for the field documentation.
     */
    public Builder addAllExpand(List<String> elements) {
      if (this.expand == null) {
        this.expand = new ArrayList<>();
      }
      this.expand.addAll(elements);
      return this;
    }

    /**
     * Add an element to `expand` list. A list is initialized for the first `add/addAll` call, and
     * subsequent calls adds additional elements to the original list. See {@link
     * TokenCreateParams#expand} for the field documentation.
     */
    public Builder addExpand(String element) {
      if (this.expand == null) {
        this.expand = new ArrayList<>();
      }
      this.expand.add(element);
      return this;
    }

    /** Information for the account this token will represent. */
    public Builder setAccount(Account account) {
      this.account = account;
      return this;
    }

    /** The bank account this token will represent. */
    public Builder setBankAccount(BankAccount bankAccount) {
      this.bankAccount = bankAccount;
      return this;
    }

    public Builder setCard(ApplePay card) {
      this.card = card;
      return this;
    }

    public Builder setCard(CreditCard card) {
      this.card = card;
      return this;
    }

    public Builder setCard(EncryptedCard card) {
      this.card = card;
      return this;
    }

    public Builder setCard(SwipeData card) {
      this.card = card;
      return this;
    }

    public Builder setCard(String card) {
      this.card = card;
      return this;
    }

    public Builder setCurrency(String currency) {
      this.currency = currency;
      return this;
    }

    /**
     * The customer (owned by the application's account) for which to create a token. For use only
     * with [Stripe Connect](https://stripe.com/docs/connect). Also, this can be used only with an
     * [OAuth access token](https://stripe.com/docs/connect/standard-accounts) or [Stripe-Account
     * header](https://stripe.com/docs/connect/authentication). For more details, see [Shared
     * Customers](https://stripe.com/docs/connect/shared-customers).
     */
    public Builder setCustomer(String customer) {
      this.customer = customer;
      return this;
    }

    /** The PII this token will represent. */
    public Builder setPii(Pii pii) {
      this.pii = pii;
      return this;
    }
  }

  @Getter
  public static class Account {
    /** The business type. Can be `individual` or `company`. */
    @SerializedName("business_type")
    String businessType;

    /** Information about the company or business. */
    @SerializedName("company")
    Company company;

    /** Information about the person represented by the account. */
    @SerializedName("individual")
    Individual individual;

    /**
     * Whether the user described by the data in the token has been shown [the Stripe Connected
     * Account
     * Agreement](https://stripe.com/docs/connect/account-tokens#stripe-connected-account-agreement).
     * When creating an account token to create a new Connect account, this value must be `true`.
     */
    @SerializedName("tos_shown_and_accepted")
    Boolean tosShownAndAccepted;

    private Account(
        String businessType, Company company, Individual individual, Boolean tosShownAndAccepted) {
      this.businessType = businessType;
      this.company = company;
      this.individual = individual;
      this.tosShownAndAccepted = tosShownAndAccepted;
    }

    public static Builder builder() {
      return new com.stripe.param.TokenCreateParams.Account.Builder();
    }

    public static class Builder {
      private String businessType;

      private Company company;

      private Individual individual;

      private Boolean tosShownAndAccepted;

      /** Finalize and obtain parameter instance from this builder. */
      public Account build() {
        return new Account(
            this.businessType, this.company, this.individual, this.tosShownAndAccepted);
      }

      /** The business type. Can be `individual` or `company`. */
      public Builder setBusinessType(String businessType) {
        this.businessType = businessType;
        return this;
      }

      /** Information about the company or business. */
      public Builder setCompany(Company company) {
        this.company = company;
        return this;
      }

      /** Information about the person represented by the account. */
      public Builder setIndividual(Individual individual) {
        this.individual = individual;
        return this;
      }

      /**
       * Whether the user described by the data in the token has been shown [the Stripe Connected
       * Account
       * Agreement](https://stripe.com/docs/connect/account-tokens#stripe-connected-account-agreement).
       * When creating an account token to create a new Connect account, this value must be `true`.
       */
      public Builder setTosShownAndAccepted(Boolean tosShownAndAccepted) {
        this.tosShownAndAccepted = tosShownAndAccepted;
        return this;
      }
    }

    @Getter
    public static class Company {
      /** The company's primary address. */
      @SerializedName("address")
      Address address;

      /** The Kana variation of the company's primary address (Japan only). */
      @SerializedName("address_kana")
      AddressKana addressKana;

      /** The Kanji variation of the company's primary address (Japan only). */
      @SerializedName("address_kanji")
      AddressKanji addressKanji;

      /** Whether information has been collected from the company's directors. */
      @SerializedName("directors_provided")
      Boolean directorsProvided;

      /** The company's legal name. */
      @SerializedName("name")
      String name;

      /** The Kana variation of the company's legal name (Japan only). */
      @SerializedName("name_kana")
      String nameKana;

      /** The Kanji variation of the company's legal name (Japan only). */
      @SerializedName("name_kanji")
      String nameKanji;

      /** Whether information has been collected from the company's owners. */
      @SerializedName("owners_provided")
      Boolean ownersProvided;

      /** The company's phone number (used for verification). */
      @SerializedName("phone")
      String phone;

      /**
       * The business ID number of the company, as appropriate for the companyâ€™s country. (Examples
       * are an Employer ID Number in the U.S., a Business Number in Canada, or a Company Number in
       * the UK.)
       */
      @SerializedName("tax_id")
      String taxId;

      /** The jurisdiction in which the `tax_id` is registered (Germany-based companies only). */
      @SerializedName("tax_id_registrar")
      String taxIdRegistrar;

      /** The VAT number of the company. */
      @SerializedName("vat_id")
      String vatId;

      private Company(
          Address address,
          AddressKana addressKana,
          AddressKanji addressKanji,
          Boolean directorsProvided,
          String name,
          String nameKana,
          String nameKanji,
          Boolean ownersProvided,
          String phone,
          String taxId,
          String taxIdRegistrar,
          String vatId) {
        this.address = address;
        this.addressKana = addressKana;
        this.addressKanji = addressKanji;
        this.directorsProvided = directorsProvided;
        this.name = name;
        this.nameKana = nameKana;
        this.nameKanji = nameKanji;
        this.ownersProvided = ownersProvided;
        this.phone = phone;
        this.taxId = taxId;
        this.taxIdRegistrar = taxIdRegistrar;
        this.vatId = vatId;
      }

      public static Builder builder() {
        return new com.stripe.param.TokenCreateParams.Account.Company.Builder();
      }

      public static class Builder {
        private Address address;

        private AddressKana addressKana;

        private AddressKanji addressKanji;

        private Boolean directorsProvided;

        private String name;

        private String nameKana;

        private String nameKanji;

        private Boolean ownersProvided;

        private String phone;

        private String taxId;

        private String taxIdRegistrar;

        private String vatId;

        /** Finalize and obtain parameter instance from this builder. */
        public Company build() {
          return new Company(
              this.address,
              this.addressKana,
              this.addressKanji,
              this.directorsProvided,
              this.name,
              this.nameKana,
              this.nameKanji,
              this.ownersProvided,
              this.phone,
              this.taxId,
              this.taxIdRegistrar,
              this.vatId);
        }

        /** The Kana variation of the company's primary address (Japan only). */
        public Builder setAddressKana(AddressKana addressKana) {
          this.addressKana = addressKana;
          return this;
        }

        /** The Kanji variation of the company's primary address (Japan only). */
        public Builder setAddressKanji(AddressKanji addressKanji) {
          this.addressKanji = addressKanji;
          return this;
        }

        /** The company's primary address. */
        public Builder setAddress(Address address) {
          this.address = address;
          return this;
        }

        /** Whether information has been collected from the company's directors. */
        public Builder setDirectorsProvided(Boolean directorsProvided) {
          this.directorsProvided = directorsProvided;
          return this;
        }

        /** The Kana variation of the company's legal name (Japan only). */
        public Builder setNameKana(String nameKana) {
          this.nameKana = nameKana;
          return this;
        }

        /** The Kanji variation of the company's legal name (Japan only). */
        public Builder setNameKanji(String nameKanji) {
          this.nameKanji = nameKanji;
          return this;
        }

        /** The company's legal name. */
        public Builder setName(String name) {
          this.name = name;
          return this;
        }

        /** Whether information has been collected from the company's owners. */
        public Builder setOwnersProvided(Boolean ownersProvided) {
          this.ownersProvided = ownersProvided;
          return this;
        }

        /** The company's phone number (used for verification). */
        public Builder setPhone(String phone) {
          this.phone = phone;
          return this;
        }

        /** The jurisdiction in which the `tax_id` is registered (Germany-based companies only). */
        public Builder setTaxIdRegistrar(String taxIdRegistrar) {
          this.taxIdRegistrar = taxIdRegistrar;
          return this;
        }

        /**
         * The business ID number of the company, as appropriate for the companyâ€™s country.
         * (Examples are an Employer ID Number in the U.S., a Business Number in Canada, or a
         * Company Number in the UK.)
         */
        public Builder setTaxId(String taxId) {
          this.taxId = taxId;
          return this;
        }

        /** The VAT number of the company. */
        public Builder setVatId(String vatId) {
          this.vatId = vatId;
          return this;
        }
      }

      @Getter
      public static class Address {
        /** City, district, suburb, town, or village. */
        @SerializedName("city")
        String city;

        /**
         * Two-letter country code ([ISO 3166-1
         * alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
         */
        @SerializedName("country")
        String country;

        /** Address line 1 (e.g., street, PO Box, or company name). */
        @SerializedName("line1")
        String line1;

        /** Address line 2 (e.g., apartment, suite, unit, or building). */
        @SerializedName("line2")
        String line2;

        /** ZIP or postal code. */
        @SerializedName("postal_code")
        String postalCode;

        /** State, county, province, or region. */
        @SerializedName("state")
        String state;

        private Address(
            String city,
            String country,
            String line1,
            String line2,
            String postalCode,
            String state) {
          this.city = city;
          this.country = country;
          this.line1 = line1;
          this.line2 = line2;
          this.postalCode = postalCode;
          this.state = state;
        }

        public static Builder builder() {
          return new com.stripe.param.TokenCreateParams.Account.Company.Address.Builder();
        }

        public static class Builder {
          private String city;

          private String country;

          private String line1;

          private String line2;

          private String postalCode;

          private String state;

          /** Finalize and obtain parameter instance from this builder. */
          public Address build() {
            return new Address(
                this.city, this.country, this.line1, this.line2, this.postalCode, this.state);
          }

          /** City, district, suburb, town, or village. */
          public Builder setCity(String city) {
            this.city = city;
            return this;
          }

          /**
           * Two-letter country code ([ISO 3166-1
           * alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
           */
          public Builder setCountry(String country) {
            this.country = country;
            return this;
          }

          /** Address line 1 (e.g., street, PO Box, or company name). */
          public Builder setLine1(String line1) {
            this.line1 = line1;
            return this;
          }

          /** Address line 2 (e.g., apartment, suite, unit, or building). */
          public Builder setLine2(String line2) {
            this.line2 = line2;
            return this;
          }

          /** ZIP or postal code. */
          public Builder setPostalCode(String postalCode) {
            this.postalCode = postalCode;
            return this;
          }

          /** State, county, province, or region. */
          public Builder setState(String state) {
            this.state = state;
            return this;
          }
        }
      }

      @Getter
      public static class AddressKana {
        /** City or ward. */
        @SerializedName("city")
        String city;

        /**
         * Two-letter country code ([ISO 3166-1
         * alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
         */
        @SerializedName("country")
        String country;

        /** Block or building number. */
        @SerializedName("line1")
        String line1;

        /** Building details. */
        @SerializedName("line2")
        String line2;

        /** Postal code. */
        @SerializedName("postal_code")
        String postalCode;

        /** Prefecture. */
        @SerializedName("state")
        String state;

        /** Town or cho-me. */
        @SerializedName("town")
        String town;

        private AddressKana(
            String city,
            String country,
            String line1,
            String line2,
            String postalCode,
            String state,
            String town) {
          this.city = city;
          this.country = country;
          this.line1 = line1;
          this.line2 = line2;
          this.postalCode = postalCode;
          this.state = state;
          this.town = town;
        }

        public static Builder builder() {
          return new com.stripe.param.TokenCreateParams.Account.Company.AddressKana.Builder();
        }

        public static class Builder {
          private String city;

          private String country;

          private String line1;

          private String line2;

          private String postalCode;

          private String state;

          private String town;

          /** Finalize and obtain parameter instance from this builder. */
          public AddressKana build() {
            return new AddressKana(
                this.city,
                this.country,
                this.line1,
                this.line2,
                this.postalCode,
                this.state,
                this.town);
          }

          /** City or ward. */
          public Builder setCity(String city) {
            this.city = city;
            return this;
          }

          /**
           * Two-letter country code ([ISO 3166-1
           * alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
           */
          public Builder setCountry(String country) {
            this.country = country;
            return this;
          }

          /** Block or building number. */
          public Builder setLine1(String line1) {
            this.line1 = line1;
            return this;
          }

          /** Building details. */
          public Builder setLine2(String line2) {
            this.line2 = line2;
            return this;
          }

          /** Postal code. */
          public Builder setPostalCode(String postalCode) {
            this.postalCode = postalCode;
            return this;
          }

          /** Prefecture. */
          public Builder setState(String state) {
            this.state = state;
            return this;
          }

          /** Town or cho-me. */
          public Builder setTown(String town) {
            this.town = town;
            return this;
          }
        }
      }

      @Getter
      public static class AddressKanji {
        /** City or ward. */
        @SerializedName("city")
        String city;

        /**
         * Two-letter country code ([ISO 3166-1
         * alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
         */
        @SerializedName("country")
        String country;

        /** Block or building number. */
        @SerializedName("line1")
        String line1;

        /** Building details. */
        @SerializedName("line2")
        String line2;

        /** Postal code. */
        @SerializedName("postal_code")
        String postalCode;

        /** Prefecture. */
        @SerializedName("state")
        String state;

        /** Town or cho-me. */
        @SerializedName("town")
        String town;

        private AddressKanji(
            String city,
            String country,
            String line1,
            String line2,
            String postalCode,
            String state,
            String town) {
          this.city = city;
          this.country = country;
          this.line1 = line1;
          this.line2 = line2;
          this.postalCode = postalCode;
          this.state = state;
          this.town = town;
        }

        public static Builder builder() {
          return new com.stripe.param.TokenCreateParams.Account.Company.AddressKanji.Builder();
        }

        public static class Builder {
          private String city;

          private String country;

          private String line1;

          private String line2;

          private String postalCode;

          private String state;

          private String town;

          /** Finalize and obtain parameter instance from this builder. */
          public AddressKanji build() {
            return new AddressKanji(
                this.city,
                this.country,
                this.line1,
                this.line2,
                this.postalCode,
                this.state,
                this.town);
          }

          /** City or ward. */
          public Builder setCity(String city) {
            this.city = city;
            return this;
          }

          /**
           * Two-letter country code ([ISO 3166-1
           * alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
           */
          public Builder setCountry(String country) {
            this.country = country;
            return this;
          }

          /** Block or building number. */
          public Builder setLine1(String line1) {
            this.line1 = line1;
            return this;
          }

          /** Building details. */
          public Builder setLine2(String line2) {
            this.line2 = line2;
            return this;
          }

          /** Postal code. */
          public Builder setPostalCode(String postalCode) {
            this.postalCode = postalCode;
            return this;
          }

          /** Prefecture. */
          public Builder setState(String state) {
            this.state = state;
            return this;
          }

          /** Town or cho-me. */
          public Builder setTown(String town) {
            this.town = town;
            return this;
          }
        }
      }
    }

    @Getter
    public static class Individual {
      /** The individual's primary address. */
      @SerializedName("address")
      Address address;

      /** The Kana variation of the the individual's primary address (Japan only). */
      @SerializedName("address_kana")
      AddressKana addressKana;

      /** The Kanji variation of the the individual's primary address (Japan only). */
      @SerializedName("address_kanji")
      AddressKanji addressKanji;

      /** The individual's date of birth. */
      @SerializedName("dob")
      Dob dob;

      @SerializedName("email")
      String email;

      /** The individual's first name. */
      @SerializedName("first_name")
      String firstName;

      /** The Kana variation of the the individual's first name (Japan only). */
      @SerializedName("first_name_kana")
      String firstNameKana;

      /** The Kanji variation of the individual's first name (Japan only). */
      @SerializedName("first_name_kanji")
      String firstNameKanji;

      /** The individual's gender (International regulations require either "male" or "female"). */
      @SerializedName("gender")
      String gender;

      /**
       * The government-issued ID number of the individual, as appropriate for the representativeâ€™s
       * country. (Examples are a Social Security Number in the U.S., or a Social Insurance Number
       * in Canada). Instead of the number itself, you can also provide a [PII token created with
       * Stripe.js](https://stripe.com/docs/stripe.js#collecting-pii-data).
       */
      @SerializedName("id_number")
      String idNumber;

      /** The individual's last name. */
      @SerializedName("last_name")
      String lastName;

      /** The Kana varation of the individual's last name (Japan only). */
      @SerializedName("last_name_kana")
      String lastNameKana;

      /** The Kanji varation of the individual's last name (Japan only). */
      @SerializedName("last_name_kanji")
      String lastNameKanji;

      /** The individual's maiden name. */
      @SerializedName("maiden_name")
      String maidenName;

      /**
       * Set of key-value pairs that you can attach to an object. This can be useful for storing
       * additional information about the object in a structured format. Individual keys can be
       * unset by posting an empty value to them. All keys can be unset by posting an empty value to
       * `metadata`.
       */
      @SerializedName("metadata")
      Map<String, String> metadata;

      /** The individual's phone number. */
      @SerializedName("phone")
      String phone;

      /** The last four digits of the individual's Social Security Number (U.S. only). */
      @SerializedName("ssn_last_4")
      String ssnLast4;

      /** The individual's verification document information. */
      @SerializedName("verification")
      Verification verification;

      private Individual(
          Address address,
          AddressKana addressKana,
          AddressKanji addressKanji,
          Dob dob,
          String email,
          String firstName,
          String firstNameKana,
          String firstNameKanji,
          String gender,
          String idNumber,
          String lastName,
          String lastNameKana,
          String lastNameKanji,
          String maidenName,
          Map<String, String> metadata,
          String phone,
          String ssnLast4,
          Verification verification) {
        this.address = address;
        this.addressKana = addressKana;
        this.addressKanji = addressKanji;
        this.dob = dob;
        this.email = email;
        this.firstName = firstName;
        this.firstNameKana = firstNameKana;
        this.firstNameKanji = firstNameKanji;
        this.gender = gender;
        this.idNumber = idNumber;
        this.lastName = lastName;
        this.lastNameKana = lastNameKana;
        this.lastNameKanji = lastNameKanji;
        this.maidenName = maidenName;
        this.metadata = metadata;
        this.phone = phone;
        this.ssnLast4 = ssnLast4;
        this.verification = verification;
      }

      public static Builder builder() {
        return new com.stripe.param.TokenCreateParams.Account.Individual.Builder();
      }

      public static class Builder {
        private Address address;

        private AddressKana addressKana;

        private AddressKanji addressKanji;

        private Dob dob;

        private String email;

        private String firstName;

        private String firstNameKana;

        private String firstNameKanji;

        private String gender;

        private String idNumber;

        private String lastName;

        private String lastNameKana;

        private String lastNameKanji;

        private String maidenName;

        private Map<String, String> metadata;

        private String phone;

        private String ssnLast4;

        private Verification verification;

        /** Finalize and obtain parameter instance from this builder. */
        public Individual build() {
          return new Individual(
              this.address,
              this.addressKana,
              this.addressKanji,
              this.dob,
              this.email,
              this.firstName,
              this.firstNameKana,
              this.firstNameKanji,
              this.gender,
              this.idNumber,
              this.lastName,
              this.lastNameKana,
              this.lastNameKanji,
              this.maidenName,
              this.metadata,
              this.phone,
              this.ssnLast4,
              this.verification);
        }

        /**
         * Add all map key/value pairs to `metadata` map. A map is initialized for the first
         * `put/putAll` call, and subsequent calls add additional key/value pairs to the original
         * map. See {@link Individual#metadata} for the field documentation.
         */
        public Builder putAllMetadata(Map<String, String> map) {
          if (this.metadata == null) {
            this.metadata = new HashMap<>();
          }
          this.metadata.putAll(map);
          return this;
        }

        /**
         * Add a key/value pair to `metadata` map. A map is initialized for the first `put/putAll`
         * call, and subsequent calls add additional key/value pairs to the original map. See {@link
         * Individual#metadata} for the field documentation.
         */
        public Builder putMetadata(String key, String value) {
          if (this.metadata == null) {
            this.metadata = new HashMap<>();
          }
          this.metadata.put(key, value);
          return this;
        }

        /** The Kana variation of the the individual's primary address (Japan only). */
        public Builder setAddressKana(AddressKana addressKana) {
          this.addressKana = addressKana;
          return this;
        }

        /** The Kanji variation of the the individual's primary address (Japan only). */
        public Builder setAddressKanji(AddressKanji addressKanji) {
          this.addressKanji = addressKanji;
          return this;
        }

        /** The individual's primary address. */
        public Builder setAddress(Address address) {
          this.address = address;
          return this;
        }

        /** The individual's date of birth. */
        public Builder setDob(Dob dob) {
          this.dob = dob;
          return this;
        }

        public Builder setEmail(String email) {
          this.email = email;
          return this;
        }

        /** The Kana variation of the the individual's first name (Japan only). */
        public Builder setFirstNameKana(String firstNameKana) {
          this.firstNameKana = firstNameKana;
          return this;
        }

        /** The Kanji variation of the individual's first name (Japan only). */
        public Builder setFirstNameKanji(String firstNameKanji) {
          this.firstNameKanji = firstNameKanji;
          return this;
        }

        /** The individual's first name. */
        public Builder setFirstName(String firstName) {
          this.firstName = firstName;
          return this;
        }

        /**
         * The individual's gender (International regulations require either "male" or "female").
         */
        public Builder setGender(String gender) {
          this.gender = gender;
          return this;
        }

        /**
         * The government-issued ID number of the individual, as appropriate for the
         * representativeâ€™s country. (Examples are a Social Security Number in the U.S., or a Social
         * Insurance Number in Canada). Instead of the number itself, you can also provide a [PII
         * token created with Stripe.js](https://stripe.com/docs/stripe.js#collecting-pii-data).
         */
        public Builder setIdNumber(String idNumber) {
          this.idNumber = idNumber;
          return this;
        }

        /** The Kana varation of the individual's last name (Japan only). */
        public Builder setLastNameKana(String lastNameKana) {
          this.lastNameKana = lastNameKana;
          return this;
        }

        /** The Kanji varation of the individual's last name (Japan only). */
        public Builder setLastNameKanji(String lastNameKanji) {
          this.lastNameKanji = lastNameKanji;
          return this;
        }

        /** The individual's last name. */
        public Builder setLastName(String lastName) {
          this.lastName = lastName;
          return this;
        }

        /** The individual's maiden name. */
        public Builder setMaidenName(String maidenName) {
          this.maidenName = maidenName;
          return this;
        }

        /** The individual's phone number. */
        public Builder setPhone(String phone) {
          this.phone = phone;
          return this;
        }

        /** The last four digits of the individual's Social Security Number (U.S. only). */
        public Builder setSsnLast4(String ssnLast4) {
          this.ssnLast4 = ssnLast4;
          return this;
        }

        /** The individual's verification document information. */
        public Builder setVerification(Verification verification) {
          this.verification = verification;
          return this;
        }
      }

      @Getter
      public static class Address {
        /** City, district, suburb, town, or village. */
        @SerializedName("city")
        String city;

        /**
         * Two-letter country code ([ISO 3166-1
         * alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
         */
        @SerializedName("country")
        String country;

        /** Address line 1 (e.g., street, PO Box, or company name). */
        @SerializedName("line1")
        String line1;

        /** Address line 2 (e.g., apartment, suite, unit, or building). */
        @SerializedName("line2")
        String line2;

        /** ZIP or postal code. */
        @SerializedName("postal_code")
        String postalCode;

        /** State, county, province, or region. */
        @SerializedName("state")
        String state;

        private Address(
            String city,
            String country,
            String line1,
            String line2,
            String postalCode,
            String state) {
          this.city = city;
          this.country = country;
          this.line1 = line1;
          this.line2 = line2;
          this.postalCode = postalCode;
          this.state = state;
        }

        public static Builder builder() {
          return new com.stripe.param.TokenCreateParams.Account.Individual.Address.Builder();
        }

        public static class Builder {
          private String city;

          private String country;

          private String line1;

          private String line2;

          private String postalCode;

          private String state;

          /** Finalize and obtain parameter instance from this builder. */
          public Address build() {
            return new Address(
                this.city, this.country, this.line1, this.line2, this.postalCode, this.state);
          }

          /** City, district, suburb, town, or village. */
          public Builder setCity(String city) {
            this.city = city;
            return this;
          }

          /**
           * Two-letter country code ([ISO 3166-1
           * alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
           */
          public Builder setCountry(String country) {
            this.country = country;
            return this;
          }

          /** Address line 1 (e.g., street, PO Box, or company name). */
          public Builder setLine1(String line1) {
            this.line1 = line1;
            return this;
          }

          /** Address line 2 (e.g., apartment, suite, unit, or building). */
          public Builder setLine2(String line2) {
            this.line2 = line2;
            return this;
          }

          /** ZIP or postal code. */
          public Builder setPostalCode(String postalCode) {
            this.postalCode = postalCode;
            return this;
          }

          /** State, county, province, or region. */
          public Builder setState(String state) {
            this.state = state;
            return this;
          }
        }
      }

      @Getter
      public static class AddressKana {
        /** City or ward. */
        @SerializedName("city")
        String city;

        /**
         * Two-letter country code ([ISO 3166-1
         * alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
         */
        @SerializedName("country")
        String country;

        /** Block or building number. */
        @SerializedName("line1")
        String line1;

        /** Building details. */
        @SerializedName("line2")
        String line2;

        /** Postal code. */
        @SerializedName("postal_code")
        String postalCode;

        /** Prefecture. */
        @SerializedName("state")
        String state;

        /** Town or cho-me. */
        @SerializedName("town")
        String town;

        private AddressKana(
            String city,
            String country,
            String line1,
            String line2,
            String postalCode,
            String state,
            String town) {
          this.city = city;
          this.country = country;
          this.line1 = line1;
          this.line2 = line2;
          this.postalCode = postalCode;
          this.state = state;
          this.town = town;
        }

        public static Builder builder() {
          return new com.stripe.param.TokenCreateParams.Account.Individual.AddressKana.Builder();
        }

        public static class Builder {
          private String city;

          private String country;

          private String line1;

          private String line2;

          private String postalCode;

          private String state;

          private String town;

          /** Finalize and obtain parameter instance from this builder. */
          public AddressKana build() {
            return new AddressKana(
                this.city,
                this.country,
                this.line1,
                this.line2,
                this.postalCode,
                this.state,
                this.town);
          }

          /** City or ward. */
          public Builder setCity(String city) {
            this.city = city;
            return this;
          }

          /**
           * Two-letter country code ([ISO 3166-1
           * alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
           */
          public Builder setCountry(String country) {
            this.country = country;
            return this;
          }

          /** Block or building number. */
          public Builder setLine1(String line1) {
            this.line1 = line1;
            return this;
          }

          /** Building details. */
          public Builder setLine2(String line2) {
            this.line2 = line2;
            return this;
          }

          /** Postal code. */
          public Builder setPostalCode(String postalCode) {
            this.postalCode = postalCode;
            return this;
          }

          /** Prefecture. */
          public Builder setState(String state) {
            this.state = state;
            return this;
          }

          /** Town or cho-me. */
          public Builder setTown(String town) {
            this.town = town;
            return this;
          }
        }
      }

      @Getter
      public static class AddressKanji {
        /** City or ward. */
        @SerializedName("city")
        String city;

        /**
         * Two-letter country code ([ISO 3166-1
         * alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
         */
        @SerializedName("country")
        String country;

        /** Block or building number. */
        @SerializedName("line1")
        String line1;

        /** Building details. */
        @SerializedName("line2")
        String line2;

        /** Postal code. */
        @SerializedName("postal_code")
        String postalCode;

        /** Prefecture. */
        @SerializedName("state")
        String state;

        /** Town or cho-me. */
        @SerializedName("town")
        String town;

        private AddressKanji(
            String city,
            String country,
            String line1,
            String line2,
            String postalCode,
            String state,
            String town) {
          this.city = city;
          this.country = country;
          this.line1 = line1;
          this.line2 = line2;
          this.postalCode = postalCode;
          this.state = state;
          this.town = town;
        }

        public static Builder builder() {
          return new com.stripe.param.TokenCreateParams.Account.Individual.AddressKanji.Builder();
        }

        public static class Builder {
          private String city;

          private String country;

          private String line1;

          private String line2;

          private String postalCode;

          private String state;

          private String town;

          /** Finalize and obtain parameter instance from this builder. */
          public AddressKanji build() {
            return new AddressKanji(
                this.city,
                this.country,
                this.line1,
                this.line2,
                this.postalCode,
                this.state,
                this.town);
          }

          /** City or ward. */
          public Builder setCity(String city) {
            this.city = city;
            return this;
          }

          /**
           * Two-letter country code ([ISO 3166-1
           * alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
           */
          public Builder setCountry(String country) {
            this.country = country;
            return this;
          }

          /** Block or building number. */
          public Builder setLine1(String line1) {
            this.line1 = line1;
            return this;
          }

          /** Building details. */
          public Builder setLine2(String line2) {
            this.line2 = line2;
            return this;
          }

          /** Postal code. */
          public Builder setPostalCode(String postalCode) {
            this.postalCode = postalCode;
            return this;
          }

          /** Prefecture. */
          public Builder setState(String state) {
            this.state = state;
            return this;
          }

          /** Town or cho-me. */
          public Builder setTown(String town) {
            this.town = town;
            return this;
          }
        }
      }

      @Getter
      public static class Dob {
        /** The day of birth, between 1 and 31. */
        @SerializedName("day")
        Long day;

        /** The month of birth, between 1 and 12. */
        @SerializedName("month")
        Long month;

        /** The four-digit year of birth. */
        @SerializedName("year")
        Long year;

        private Dob(Long day, Long month, Long year) {
          this.day = day;
          this.month = month;
          this.year = year;
        }

        public static Builder builder() {
          return new com.stripe.param.TokenCreateParams.Account.Individual.Dob.Builder();
        }

        public static class Builder {
          private Long day;

          private Long month;

          private Long year;

          /** Finalize and obtain parameter instance from this builder. */
          public Dob build() {
            return new Dob(this.day, this.month, this.year);
          }

          /** The day of birth, between 1 and 31. */
          public Builder setDay(Long day) {
            this.day = day;
            return this;
          }

          /** The month of birth, between 1 and 12. */
          public Builder setMonth(Long month) {
            this.month = month;
            return this;
          }

          /** The four-digit year of birth. */
          public Builder setYear(Long year) {
            this.year = year;
            return this;
          }
        }
      }

      @Getter
      public static class Verification {
        /** An identifying document, either a passport or local ID card. */
        @SerializedName("document")
        Document document;

        private Verification(Document document) {
          this.document = document;
        }

        public static Builder builder() {
          return new com.stripe.param.TokenCreateParams.Account.Individual.Verification.Builder();
        }

        public static class Builder {
          private Document document;

          /** Finalize and obtain parameter instance from this builder. */
          public Verification build() {
            return new Verification(this.document);
          }

          /** An identifying document, either a passport or local ID card. */
          public Builder setDocument(Document document) {
            this.document = document;
            return this;
          }
        }

        @Getter
        public static class Document {
          /**
           * The back of an ID returned by a [file upload](#create_file) with a `purpose` value of
           * `identity_document`.
           */
          @SerializedName("back")
          String back;

          /**
           * The front of an ID returned by a [file upload](#create_file) with a `purpose` value of
           * `identity_document`.
           */
          @SerializedName("front")
          String front;

          private Document(String back, String front) {
            this.back = back;
            this.front = front;
          }

          public static Builder builder() {
            return new com.stripe.param.TokenCreateParams.Account.Individual.Verification.Document
                .Builder();
          }

          public static class Builder {
            private String back;

            private String front;

            /** Finalize and obtain parameter instance from this builder. */
            public Document build() {
              return new Document(this.back, this.front);
            }

            /**
             * The back of an ID returned by a [file upload](#create_file) with a `purpose` value of
             * `identity_document`.
             */
            public Builder setBack(String back) {
              this.back = back;
              return this;
            }

            /**
             * The front of an ID returned by a [file upload](#create_file) with a `purpose` value
             * of `identity_document`.
             */
            public Builder setFront(String front) {
              this.front = front;
              return this;
            }
          }
        }
      }
    }
  }

  @Getter
  public static class ApplePay {
    @SerializedName("address_city")
    String addressCity;

    @SerializedName("address_country")
    String addressCountry;

    @SerializedName("address_line1")
    String addressLine1;

    @SerializedName("address_line2")
    String addressLine2;

    @SerializedName("address_state")
    String addressState;

    @SerializedName("address_zip")
    String addressZip;

    @SerializedName("name")
    String name;

    @SerializedName("object")
    ObjectType object;

    @SerializedName("pk_token")
    String pkToken;

    @SerializedName("token_cryptogram")
    String tokenCryptogram;

    @SerializedName("token_cryptogram_amount")
    Long tokenCryptogramAmount;

    @SerializedName("token_cryptogram_currency")
    String tokenCryptogramCurrency;

    @SerializedName("token_cryptogram_requestor")
    String tokenCryptogramRequestor;

    @SerializedName("token_cryptogram_used")
    Boolean tokenCryptogramUsed;

    private ApplePay(
        String addressCity,
        String addressCountry,
        String addressLine1,
        String addressLine2,
        String addressState,
        String addressZip,
        String name,
        ObjectType object,
        String pkToken,
        String tokenCryptogram,
        Long tokenCryptogramAmount,
        String tokenCryptogramCurrency,
        String tokenCryptogramRequestor,
        Boolean tokenCryptogramUsed) {
      this.addressCity = addressCity;
      this.addressCountry = addressCountry;
      this.addressLine1 = addressLine1;
      this.addressLine2 = addressLine2;
      this.addressState = addressState;
      this.addressZip = addressZip;
      this.name = name;
      this.object = object;
      this.pkToken = pkToken;
      this.tokenCryptogram = tokenCryptogram;
      this.tokenCryptogramAmount = tokenCryptogramAmount;
      this.tokenCryptogramCurrency = tokenCryptogramCurrency;
      this.tokenCryptogramRequestor = tokenCryptogramRequestor;
      this.tokenCryptogramUsed = tokenCryptogramUsed;
    }

    public static Builder builder() {
      return new com.stripe.param.TokenCreateParams.ApplePay.Builder();
    }

    public static class Builder {
      private String addressCity;

      private String addressCountry;

      private String addressLine1;

      private String addressLine2;

      private String addressState;

      private String addressZip;

      private String name;

      private ObjectType object;

      private String pkToken;

      private String tokenCryptogram;

      private Long tokenCryptogramAmount;

      private String tokenCryptogramCurrency;

      private String tokenCryptogramRequestor;

      private Boolean tokenCryptogramUsed;

      /** Finalize and obtain parameter instance from this builder. */
      public ApplePay build() {
        return new ApplePay(
            this.addressCity,
            this.addressCountry,
            this.addressLine1,
            this.addressLine2,
            this.addressState,
            this.addressZip,
            this.name,
            this.object,
            this.pkToken,
            this.tokenCryptogram,
            this.tokenCryptogramAmount,
            this.tokenCryptogramCurrency,
            this.tokenCryptogramRequestor,
            this.tokenCryptogramUsed);
      }

      public Builder setAddressCity(String addressCity) {
        this.addressCity = addressCity;
        return this;
      }

      public Builder setAddressCountry(String addressCountry) {
        this.addressCountry = addressCountry;
        return this;
      }

      public Builder setAddressLine1(String addressLine1) {
        this.addressLine1 = addressLine1;
        return this;
      }

      public Builder setAddressLine2(String addressLine2) {
        this.addressLine2 = addressLine2;
        return this;
      }

      public Builder setAddressState(String addressState) {
        this.addressState = addressState;
        return this;
      }

      public Builder setAddressZip(String addressZip) {
        this.addressZip = addressZip;
        return this;
      }

      public Builder setName(String name) {
        this.name = name;
        return this;
      }

      public Builder setObject(ObjectType object) {
        this.object = object;
        return this;
      }

      public Builder setPkToken(String pkToken) {
        this.pkToken = pkToken;
        return this;
      }

      public Builder setTokenCryptogramAmount(Long tokenCryptogramAmount) {
        this.tokenCryptogramAmount = tokenCryptogramAmount;
        return this;
      }

      public Builder setTokenCryptogramCurrency(String tokenCryptogramCurrency) {
        this.tokenCryptogramCurrency = tokenCryptogramCurrency;
        return this;
      }

      public Builder setTokenCryptogramRequestor(String tokenCryptogramRequestor) {
        this.tokenCryptogramRequestor = tokenCryptogramRequestor;
        return this;
      }

      public Builder setTokenCryptogramUsed(Boolean tokenCryptogramUsed) {
        this.tokenCryptogramUsed = tokenCryptogramUsed;
        return this;
      }

      public Builder setTokenCryptogram(String tokenCryptogram) {
        this.tokenCryptogram = tokenCryptogram;
        return this;
      }
    }

    public enum ObjectType implements ApiRequestParams.Enum {
      @SerializedName("card")
      CARD("card");

      @Getter private final String value;

      ObjectType(String value) {
        this.value = value;
      }
    }
  }

  @Getter
  public static class BankAccount {
    /**
     * The name of the person or business that owns the bank account.This field is required when
     * attaching the bank account to a `Customer` object.
     */
    @SerializedName("account_holder_name")
    String accountHolderName;

    /**
     * The type of entity that holds the account. It can be `company` or `individual`. This field is
     * required when attaching the bank account to a `Customer` object.
     */
    @SerializedName("account_holder_type")
    AccountHolderType accountHolderType;

    /** The account number for the bank account, in string form. Must be a checking account. */
    @SerializedName("account_number")
    String accountNumber;

    /** The country in which the bank account is located. */
    @SerializedName("country")
    String country;

    /**
     * The currency the bank account is in. This must be a country/currency pairing that [Stripe
     * supports.](docs/payouts)
     */
    @SerializedName("currency")
    String currency;

    /**
     * The routing number, sort code, or other country-appropriateinstitution number for the bank
     * account. For US bank accounts, this is required and should bethe ACH routing number, not the
     * wire routing number. If you are providing an IBAN for`account_number`, this field is not
     * required.
     */
    @SerializedName("routing_number")
    String routingNumber;

    private BankAccount(
        String accountHolderName,
        AccountHolderType accountHolderType,
        String accountNumber,
        String country,
        String currency,
        String routingNumber) {
      this.accountHolderName = accountHolderName;
      this.accountHolderType = accountHolderType;
      this.accountNumber = accountNumber;
      this.country = country;
      this.currency = currency;
      this.routingNumber = routingNumber;
    }

    public static Builder builder() {
      return new com.stripe.param.TokenCreateParams.BankAccount.Builder();
    }

    public static class Builder {
      private String accountHolderName;

      private AccountHolderType accountHolderType;

      private String accountNumber;

      private String country;

      private String currency;

      private String routingNumber;

      /** Finalize and obtain parameter instance from this builder. */
      public BankAccount build() {
        return new BankAccount(
            this.accountHolderName,
            this.accountHolderType,
            this.accountNumber,
            this.country,
            this.currency,
            this.routingNumber);
      }

      /**
       * The name of the person or business that owns the bank account.This field is required when
       * attaching the bank account to a `Customer` object.
       */
      public Builder setAccountHolderName(String accountHolderName) {
        this.accountHolderName = accountHolderName;
        return this;
      }

      /**
       * The type of entity that holds the account. It can be `company` or `individual`. This field
       * is required when attaching the bank account to a `Customer` object.
       */
      public Builder setAccountHolderType(AccountHolderType accountHolderType) {
        this.accountHolderType = accountHolderType;
        return this;
      }

      /** The account number for the bank account, in string form. Must be a checking account. */
      public Builder setAccountNumber(String accountNumber) {
        this.accountNumber = accountNumber;
        return this;
      }

      /** The country in which the bank account is located. */
      public Builder setCountry(String country) {
        this.country = country;
        return this;
      }

      /**
       * The currency the bank account is in. This must be a country/currency pairing that [Stripe
       * supports.](docs/payouts)
       */
      public Builder setCurrency(String currency) {
        this.currency = currency;
        return this;
      }

      /**
       * The routing number, sort code, or other country-appropriateinstitution number for the bank
       * account. For US bank accounts, this is required and should bethe ACH routing number, not
       * the wire routing number. If you are providing an IBAN for`account_number`, this field is
       * not required.
       */
      public Builder setRoutingNumber(String routingNumber) {
        this.routingNumber = routingNumber;
        return this;
      }
    }

    public enum AccountHolderType implements ApiRequestParams.Enum {
      @SerializedName("company")
      COMPANY("company"),

      @SerializedName("individual")
      INDIVIDUAL("individual");

      @Getter private final String value;

      AccountHolderType(String value) {
        this.value = value;
      }
    }
  }

  @Getter
  public static class CreditCard {
    @SerializedName("address_city")
    String addressCity;

    @SerializedName("address_country")
    String addressCountry;

    @SerializedName("address_line1")
    String addressLine1;

    @SerializedName("address_line2")
    String addressLine2;

    @SerializedName("address_state")
    String addressState;

    @SerializedName("address_zip")
    String addressZip;

    @SerializedName("card_type")
    String cardType;

    @SerializedName("currency")
    String currency;

    @SerializedName("customer")
    String customer;

    @SerializedName("default_for_currency")
    Boolean defaultForCurrency;

    @SerializedName("exp_month")
    String expMonth;

    @SerializedName("exp_year")
    String expYear;

    @SerializedName("last4")
    String last4;

    @SerializedName("metadata")
    Map<String, String> metadata;

    @SerializedName("name")
    String name;

    @SerializedName("number")
    String number;

    @SerializedName("number_looks_valid")
    Boolean numberLooksValid;

    @SerializedName("number_luhn_valid")
    Boolean numberLuhnValid;

    @SerializedName("object")
    ObjectType object;

    @SerializedName("3d_secure")
    ThreeDSecure threeDSecure;

    @SerializedName("tokenization_method")
    String tokenizationMethod;

    private CreditCard(
        String addressCity,
        String addressCountry,
        String addressLine1,
        String addressLine2,
        String addressState,
        String addressZip,
        String cardType,
        String currency,
        String customer,
        Boolean defaultForCurrency,
        String expMonth,
        String expYear,
        String last4,
        Map<String, String> metadata,
        String name,
        String number,
        Boolean numberLooksValid,
        Boolean numberLuhnValid,
        ObjectType object,
        ThreeDSecure threeDSecure,
        String tokenizationMethod) {
      this.addressCity = addressCity;
      this.addressCountry = addressCountry;
      this.addressLine1 = addressLine1;
      this.addressLine2 = addressLine2;
      this.addressState = addressState;
      this.addressZip = addressZip;
      this.cardType = cardType;
      this.currency = currency;
      this.customer = customer;
      this.defaultForCurrency = defaultForCurrency;
      this.expMonth = expMonth;
      this.expYear = expYear;
      this.last4 = last4;
      this.metadata = metadata;
      this.name = name;
      this.number = number;
      this.numberLooksValid = numberLooksValid;
      this.numberLuhnValid = numberLuhnValid;
      this.object = object;
      this.threeDSecure = threeDSecure;
      this.tokenizationMethod = tokenizationMethod;
    }

    public static Builder builder() {
      return new com.stripe.param.TokenCreateParams.CreditCard.Builder();
    }

    public static class Builder {
      private String addressCity;

      private String addressCountry;

      private String addressLine1;

      private String addressLine2;

      private String addressState;

      private String addressZip;

      private String cardType;

      private String currency;

      private String customer;

      private Boolean defaultForCurrency;

      private String expMonth;

      private String expYear;

      private String last4;

      private Map<String, String> metadata;

      private String name;

      private String number;

      private Boolean numberLooksValid;

      private Boolean numberLuhnValid;

      private ObjectType object;

      private ThreeDSecure threeDSecure;

      private String tokenizationMethod;

      /** Finalize and obtain parameter instance from this builder. */
      public CreditCard build() {
        return new CreditCard(
            this.addressCity,
            this.addressCountry,
            this.addressLine1,
            this.addressLine2,
            this.addressState,
            this.addressZip,
            this.cardType,
            this.currency,
            this.customer,
            this.defaultForCurrency,
            this.expMonth,
            this.expYear,
            this.last4,
            this.metadata,
            this.name,
            this.number,
            this.numberLooksValid,
            this.numberLuhnValid,
            this.object,
            this.threeDSecure,
            this.tokenizationMethod);
      }

      /**
       * Add all map key/value pairs to `metadata` map. A map is initialized for the first
       * `put/putAll` call, and subsequent calls add additional key/value pairs to the original map.
       * See {@link CreditCard#metadata} for the field documentation.
       */
      public Builder putAllMetadata(Map<String, String> map) {
        if (this.metadata == null) {
          this.metadata = new HashMap<>();
        }
        this.metadata.putAll(map);
        return this;
      }

      /**
       * Add a key/value pair to `metadata` map. A map is initialized for the first `put/putAll`
       * call, and subsequent calls add additional key/value pairs to the original map. See {@link
       * CreditCard#metadata} for the field documentation.
       */
      public Builder putMetadata(String key, String value) {
        if (this.metadata == null) {
          this.metadata = new HashMap<>();
        }
        this.metadata.put(key, value);
        return this;
      }

      public Builder setAddressCity(String addressCity) {
        this.addressCity = addressCity;
        return this;
      }

      public Builder setAddressCountry(String addressCountry) {
        this.addressCountry = addressCountry;
        return this;
      }

      public Builder setAddressLine1(String addressLine1) {
        this.addressLine1 = addressLine1;
        return this;
      }

      public Builder setAddressLine2(String addressLine2) {
        this.addressLine2 = addressLine2;
        return this;
      }

      public Builder setAddressState(String addressState) {
        this.addressState = addressState;
        return this;
      }

      public Builder setAddressZip(String addressZip) {
        this.addressZip = addressZip;
        return this;
      }

      public Builder setCardType(String cardType) {
        this.cardType = cardType;
        return this;
      }

      public Builder setCurrency(String currency) {
        this.currency = currency;
        return this;
      }

      public Builder setCustomer(String customer) {
        this.customer = customer;
        return this;
      }

      public Builder setDefaultForCurrency(Boolean defaultForCurrency) {
        this.defaultForCurrency = defaultForCurrency;
        return this;
      }

      public Builder setExpMonth(String expMonth) {
        this.expMonth = expMonth;
        return this;
      }

      public Builder setExpYear(String expYear) {
        this.expYear = expYear;
        return this;
      }

      public Builder setLast4(String last4) {
        this.last4 = last4;
        return this;
      }

      public Builder setName(String name) {
        this.name = name;
        return this;
      }

      public Builder setNumberLooksValid(Boolean numberLooksValid) {
        this.numberLooksValid = numberLooksValid;
        return this;
      }

      public Builder setNumberLuhnValid(Boolean numberLuhnValid) {
        this.numberLuhnValid = numberLuhnValid;
        return this;
      }

      public Builder setNumber(String number) {
        this.number = number;
        return this;
      }

      public Builder setObject(ObjectType object) {
        this.object = object;
        return this;
      }

      public Builder setThreeDSecure(ThreeDSecure threeDSecure) {
        this.threeDSecure = threeDSecure;
        return this;
      }

      public Builder setTokenizationMethod(String tokenizationMethod) {
        this.tokenizationMethod = tokenizationMethod;
        return this;
      }
    }

    @Getter
    public static class ThreeDSecure {
      @SerializedName("amount")
      Long amount;

      @SerializedName("currency")
      String currency;

      @SerializedName("preference")
      Preference preference;

      @SerializedName("return_url")
      String returnUrl;

      private ThreeDSecure(Long amount, String currency, Preference preference, String returnUrl) {
        this.amount = amount;
        this.currency = currency;
        this.preference = preference;
        this.returnUrl = returnUrl;
      }

      public static Builder builder() {
        return new com.stripe.param.TokenCreateParams.CreditCard.ThreeDSecure.Builder();
      }

      public static class Builder {
        private Long amount;

        private String currency;

        private Preference preference;

        private String returnUrl;

        /** Finalize and obtain parameter instance from this builder. */
        public ThreeDSecure build() {
          return new ThreeDSecure(this.amount, this.currency, this.preference, this.returnUrl);
        }

        public Builder setAmount(Long amount) {
          this.amount = amount;
          return this;
        }

        public Builder setCurrency(String currency) {
          this.currency = currency;
          return this;
        }

        public Builder setPreference(Preference preference) {
          this.preference = preference;
          return this;
        }

        public Builder setReturnUrl(String returnUrl) {
          this.returnUrl = returnUrl;
          return this;
        }
      }

      public enum Preference implements ApiRequestParams.Enum {
        @SerializedName("always")
        ALWAYS("always"),

        @SerializedName("only_if_required")
        ONLY_IF_REQUIRED("only_if_required");

        @Getter private final String value;

        Preference(String value) {
          this.value = value;
        }
      }
    }

    public enum ObjectType implements ApiRequestParams.Enum {
      @SerializedName("card")
      CARD("card");

      @Getter private final String value;

      ObjectType(String value) {
        this.value = value;
      }
    }
  }

  @Getter
  public static class EncryptedCard {
    @SerializedName("encrypted")
    String encrypted;

    private EncryptedCard(String encrypted) {
      this.encrypted = encrypted;
    }

    public static Builder builder() {
      return new com.stripe.param.TokenCreateParams.EncryptedCard.Builder();
    }

    public static class Builder {
      private String encrypted;

      /** Finalize and obtain parameter instance from this builder. */
      public EncryptedCard build() {
        return new EncryptedCard(this.encrypted);
      }

      public Builder setEncrypted(String encrypted) {
        this.encrypted = encrypted;
        return this;
      }
    }
  }

  @Getter
  public static class Pii {
    /** The `id_number` for the PII, in string form. */
    @SerializedName("id_number")
    String idNumber;

    private Pii(String idNumber) {
      this.idNumber = idNumber;
    }

    public static Builder builder() {
      return new com.stripe.param.TokenCreateParams.Pii.Builder();
    }

    public static class Builder {
      private String idNumber;

      /** Finalize and obtain parameter instance from this builder. */
      public Pii build() {
        return new Pii(this.idNumber);
      }

      /** The `id_number` for the PII, in string form. */
      public Builder setIdNumber(String idNumber) {
        this.idNumber = idNumber;
        return this;
      }
    }
  }

  @Getter
  public static class SwipeData {
    @SerializedName("cvc")
    String cvc;

    @SerializedName("swipe_data")
    String swipeData;

    private SwipeData(String cvc, String swipeData) {
      this.cvc = cvc;
      this.swipeData = swipeData;
    }

    public static Builder builder() {
      return new com.stripe.param.TokenCreateParams.SwipeData.Builder();
    }

    public static class Builder {
      private String cvc;

      private String swipeData;

      /** Finalize and obtain parameter instance from this builder. */
      public SwipeData build() {
        return new SwipeData(this.cvc, this.swipeData);
      }

      public Builder setCvc(String cvc) {
        this.cvc = cvc;
        return this;
      }

      public Builder setSwipeData(String swipeData) {
        this.swipeData = swipeData;
        return this;
      }
    }
  }
}
